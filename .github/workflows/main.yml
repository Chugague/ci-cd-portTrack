# Descripción: Pipeline de CI/CD para la plataforma PortTrack utilizando GitHub Actions.
# Se activa en cada push a la rama 'main'.
name: CI/CD de PortTrack

on:
  push:
    branches:
      - main

env:
  # Variables de entorno para el workflow
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KUBE_NAMESPACE: porttrack-prod

jobs:
  build_and_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del código
        uses: actions/checkout@v2

      - name: Configurar Node.js (ejemplo para un microservicio basado en Node)
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Instalar dependencias
        run: npm install

      - name: Ejecutar pruebas unitarias
        run: npm test

  build_and_deploy:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: success()
    steps:
      - name: Checkout del código
        uses: actions/checkout@v2

      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Iniciar sesión en el Registro de Contenedores de GitHub
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT_TOKEN }}

      - name: Extraer metadatos de la etiqueta de Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Construir y Empujar la imagen de Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Desplegar en el Clúster de Kubernetes
        uses: ahmadassaf/kubectl-action@v1.0.0
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG }}
        with:
          args: apply -f k8s/deployment.yml -n ${{ env.KUBE_NAMESPACE }}
          # En un despliegue Blue-Green, aquí se aplicarían manifiestos específicos para el entorno 'green'

      - name: Enviar notificación de despliegue a Slack
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: '✅ Nuevo despliegue exitoso de PortTrack a producción. Versión: ${{ steps.meta.outputs.tags }}'
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'Despliegue de PortTrack'